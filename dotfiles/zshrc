# Path to your oh-my-zsh installation.
export ZSH=/home/handre/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

# User configuration

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

set -o ignoreeof # stop ctrl-d from killing the shell
export EDITOR='nvim'
# when entering from nix-shell bash add the PATHS to tools in _PATH
if [ -n "$_PATH" ]; then
  if [ -z "$__PATH" ]; then
    export __PATH=$PATH
    export PATH=$_PATH:$PATH
  fi
fi
alias level="echo $SHLVL"

#export PAGER=~/.config/haskell-vim-now/.vim/bundle/vimpager/vimpager
alias less=$PAGER
alias zless=$PAGER

#alias ch='(cd ~/dev/circuithub; nix-shell --run "ch $@";)'
function ch() {(cd ~/dev/circuithub; as="$@"; nix-shell --arg run-silent true --run "ch $as")}
function ghci-with() {(cd ~; ps="$@"; nix-shell  --run ghci -p "haskell.packages.ghc821.ghcWithPackages (self: with self;[$ps])" -p "haskell.packages.ghc821.hdevtools" -p "haskell.packages.ghc821.hlint" -p "haskell.packages.ghc821.hindent";)}
function api-shell() {(cd ~/dev/circuithub/api; ps="$@"; nix-shell ./nix/dev-env.nix --argstr compiler ghc802 --run "$ps")}
alias api-nvim='api-shell nvim -c "\"OpenSession api\"" '
alias api-hoogle="(cd ~/dev/circuithub/api; ./run-hoogle;)"
alias api-clean='api-shell cabal clean'
alias api-build='api-shell cabal build'
alias api-configure='api-shell cabal configure'
alias api-repl='(cd ~/dev/circuithub/api; nix-shell ./nix/dev-env.nix --argstr compiler ghc802 --run "env $(xargs < .env) cabal repl lib:circuithub-api --ghc-options=\"-interactive-print=Text.Show.Pretty.pPrint -package pretty-show -package foreign-store -package directory -freverse-errors\""  2>&1 | awk -F: '"'"'{p=/modules loaded:/};p{print $1};!p{print};{fflush()}'"'"' | tee log.txt;)'
alias client-projects-run='(cd ~/dev/circuithub; nix-shell --arg run-silent true --run "ch run-client-projects";)'
alias client-nvim='(cd ~/dev/circuithub/client; nix-shell ../shell.nix --run "nvim -c \"OpenSession client\"";)'
alias client-build='(cd ~/dev/circuithub; nix-shell --arg run-silent true --run "cd client; gulp compile";)'
alias bbswitch-off='sudo tee /proc/acpi/bbswitch <<<OFF'
alias bbswitch-on='sudo tee /proc/acpi/bbswitch <<<ON'
alias nix-add-circuithub-roots='(cd ~/dev/circuithub; nix-remove-roots; nix-add-roots; cd api; nix-remove-roots; nix-add-roots; nix-add-roots nix/dev-env.nix; nix-add-roots nix/dev-env.nix --argstr compiler ghc802; cd ../receiving-station; nix-remove-roots; nix-add-roots; nix-add-roots dev-env.nix;)'

function nix-add-roots() {(
  if [ ! -d ".gcroots" ]; then
    mkdir .gcroots
  fi
  shellFile=$1
  if [ -z "$shellFile" ]; then

    if [ -f "shell.nix" ]; then
      shellFile="shell.nix"
    else
      shellFile="."
    fi
  else
    shift 1
  fi
  depPfxArgs=$(echo $@ | sed 's,\s\|/\|=\-\|"\|\.,_,g')
  depPfx="$(echo $shellFile | sed 's,/,_,g')-$depPfxArgs"
  nix-instantiate $shellFile --indirect --add-root "$(pwd)/.gcroots/dep-$depPfx.drv"
  nix-shell $shellFile --indirect --add-root ".gcroots/dep-$depPfx" --run "exit" $@
)}

function nix-remove-roots() {(
  if [  -d ".gcroots" ]; then
    cd .gcroots
    ls | grep dep | xargs rm -f
  fi
)}

# setup direnv
eval "$(direnv hook zsh)"

# add the ssh-agent
#eval `ssh-agent -s`
